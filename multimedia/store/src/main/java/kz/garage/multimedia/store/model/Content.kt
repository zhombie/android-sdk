package kz.garage.multimedia.store.model

import android.net.Uri
import java.io.File
import kotlin.random.Random

/**
 * [id] - The unique ID of the [Content]
 * [uri] - The uri path of the [Content] (usually content://...)
 * [title] - The title of the [Content]
 * [displayName] - The display name of the [Content]. For example, an [Content] stored at
 * {@code /storage/0000-0000/DCIM/Vacation/IMG1024.JPG} would
 * have a display name of {@code IMG1024.JPG}.
 * [folder] - The primary folder of this [Content]
 * [localFile] - The local duplicate file, which is generated by given [uri]
 * [remoteAddress] - The remote file, which contains reference to url
 */
open class Content constructor(
    open val id: Long,
    open val uri: Uri,
    open val title: String?,
    open val displayName: String?,
    open val folder: Folder?,
    open val history: History?,
    open val properties: Properties?,
    open val localFile: LocalFile?,
    open val remoteAddress: RemoteAddress?
) {

    companion object {
        fun generateId(): Long =
            System.currentTimeMillis() + Random.nextLong(Long.MIN_VALUE, Long.MAX_VALUE)
    }

    val label: String?
        get() = when {
            !title.isNullOrBlank() -> title
            !displayName.isNullOrBlank() -> displayName
            else -> null
        }

    data class LocalFile constructor(
        val uri: Uri
    ) {

        constructor(file: File) : this(Uri.fromFile(file))

        private var file: File? = null

        fun exists(): Boolean =
            getFile()?.exists() == true

        fun getFile(): File? {
            if (file == null) {
                val path = uri.path
                if (path.isNullOrBlank()) return null
                file = File(path)
            }
            return file
        }

        fun requireFile(): File {
            if (file == null) {
                require(uri.scheme == "file") { "Uri lacks 'file' scheme: $this" }
                file = File(requireNotNull(uri.path) { "Uri path is null: $this" })
            }
            return requireNotNull(file)
        }

    }

    @JvmInline
    value class RemoteAddress constructor(
        val uri: Uri
    ) {

        constructor(url: String) : this(Uri.parse(url))

        val url: String
            get() = uri.toString()

    }

    /**
     * [addedAt] - The time the [Content] was first added (milliseconds)
     * [modifiedAt] - The time the [Content] was last modified (milliseconds)
     * [createdAt] - The time the [Content] was created.
     * If [Image] or [Video], it is as same as date taken (milliseconds)
     */
    data class History constructor(
        val addedAt: Long? = null,
        val modifiedAt: Long? = null,
        val createdAt: Long? = null,
    ) {

        fun isEmpty(): Boolean =
            addedAt == null && modifiedAt == null && createdAt == null
    }

    data class Properties constructor(
        val size: Long,
        val mimeType: String? = null,
    ) {

        companion object {
            const val UNDEFINED_SIZE = -1L
        }

        fun hasUndefinedSize(): Boolean =
            size == UNDEFINED_SIZE
    }

    fun isLocalFileExist(): Boolean = localFile?.exists() == true

    open fun clone(localFile: LocalFile?): Content {
        if (this.localFile == null && localFile == null) return this
        if (this.localFile == localFile) return this
        return clone(
            id = id,
            uri = uri,
            title = title,
            displayName = displayName,
            folder = folder,
            history = history,
            properties = properties,
            localFile = localFile,
            remoteAddress = remoteAddress
        )
    }

    open fun clone(uri: Uri?): Content {
        if (uri == null) return this
        return clone(remoteAddress = RemoteAddress(uri))
    }

    open fun clone(url: String?): Content {
        if (url.isNullOrBlank()) return this
        return clone(remoteAddress = RemoteAddress(url = url))
    }

    open fun clone(remoteAddress: RemoteAddress?): Content {
        if (this.remoteAddress == null && remoteAddress == null) return this
        if (this.remoteAddress?.uri == remoteAddress?.uri) return this
        return clone(
            id = id,
            uri = uri,
            title = title,
            displayName = displayName,
            folder = folder,
            history = history,
            properties = properties,
            localFile = localFile,
            remoteAddress = remoteAddress
        )
    }

    open fun clone(
        id: Long? = null,
        uri: Uri? = null,
        title: String? = null,
        displayName: String? = null,
        folder: Folder? = null,
        history: History? = null,
        properties: Properties? = null,
        localFile: LocalFile? = null,
        remoteAddress: RemoteAddress? = null
    ): Content {
        return if (this.id == id &&
            this.uri == uri &&
            this.title == title &&
            this.displayName == displayName &&
            this.folder == folder &&
            this.history == history &&
            this.properties == properties &&
            this.localFile == localFile &&
            this.remoteAddress?.uri == remoteAddress?.uri
        ) {
            this
        } else {
            Content(
                id = id ?: this.id,
                uri = uri ?: this.uri,
                title = title,
                displayName = displayName,
                folder = folder,
                history = history,
                properties = properties,
                localFile = localFile,
                remoteAddress = remoteAddress
            )
        }
    }

    override fun toString(): String =
        "${Content::class.java.simpleName}(" +
            "id=$id, " +
            "uri=$uri, " +
            "title=$title, " +
            "displayName=$displayName, " +
            "folder=$folder, " +
            "history=$history, " +
            "properties=$properties, " +
            "localFile=$localFile," +
            "remoteAddress=$remoteAddress)"

}